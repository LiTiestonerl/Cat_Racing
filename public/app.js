// --- DOM Elements ---
const catBlack = document.getElementById("cat-black");
const catOrange = document.getElementById("cat-orange");
const infoTurn = document.getElementById("info-turn");
const questionContainer = document.getElementById("question-container");
const questionText = document.getElementById("question-text");
const submitAnswer = document.getElementById("submit-answer");
const startBtn = document.getElementById("start-btn");
const raceTrack = document.querySelector(".race-track");
const answersContainer = document.getElementById("answers-container");
const resultContainer = document.getElementById("result-container");
const resultText = document.getElementById("result-text");
const restartBtn = document.getElementById("restart-btn");
const scoreBlackEl = document.getElementById("score-black");
const scoreOrangeEl = document.getElementById("score-orange");

// Th√™m ph·∫ßn t·ª≠ hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c (b·∫°n nh·ªõ th√™m div n√†y v√†o HTML trong .question-panel)
// <div id="timer" style="font-size:1.2rem; margin-bottom: 15px; font-weight: 700; color: #f0f0f0;"></div>
const timerElem = document.getElementById("timer");

// --- Constants & Variables ---
const moveStep = 100; // Kho·∫£ng c√°ch m√®o ti·∫øn m·ªói c√¢u tr·∫£ l·ªùi ƒë√∫ng
const finishLine = 475; // 600 - 125 (chi·ªÅu r·ªông m√®o)
const backgrounds = [
  "./assets/bg1/2304x1296.png",
  "./assets/bg2/2304x1296.png",
  "./assets/bg3/2304x1296.png",
  "./assets/bg4/2304x1296.png",
  "./assets/bg5/2304x1296.png",
  "./assets/bg6/2304x1296.png",
  "./assets/bg7/2304x1296.png",
  "./assets/bg8/2304x1296.png",
];

// Danh s√°ch c√¢u h·ªèi m·∫´u
const questions = [
  {
    q: "1. Theo Lu·∫≠t Ph√≤ng, ch·ªëng tham nh≈©ng 2018, tham nh≈©ng l√† g√¨?",
    choices: [
      "L√† h√†nh vi vi ph·∫°m ph√°p lu·∫≠t h√¨nh s·ª±.",
      "L√† h√†nh vi c·ªßa ng∆∞·ªùi c√≥ ch·ª©c v·ª•, quy·ªÅn h·∫°n l·ª£i d·ª•ng ch·ª©c v·ª• v√¨ v·ª• l·ª£i.",
      "L√† h√†nh vi thi·∫øu tr√°ch nhi·ªám trong c√¥ng vi·ªác",
      "L√† h√†nh vi thi·∫øu ƒë·∫°o ƒë·ª©c c√° nh√¢n.",
    ],
    a: "L√† h√†nh vi c·ªßa ng∆∞·ªùi c√≥ ch·ª©c v·ª•, quy·ªÅn h·∫°n l·ª£i d·ª•ng ch·ª©c v·ª• v√¨ v·ª• l·ª£i.",
  },
  {
    q: "2. Theo Ch·ªß t·ªãch H·ªì Ch√≠ Minh, tham nh≈©ng l√† g√¨?",
    choices: [
      "l√† m·ªôt h√†nh vi thi·∫øu ƒë·∫°o ƒë·ª©c.",
      "L√† ‚ÄúƒÉn c·∫Øp c·ªßa c√¥ng l√†m c·ªßa t∆∞.‚Äù",
      "L√† m·ªôt cƒÉn b·ªánh x√£ h·ªôi kh√¥ng th·ªÉ ch·ªØa tr·ªã.",
      "L√† v·∫•n ƒë·ªÅ t·∫•t y·∫øu trong qu√° tr√¨nh ph√°t tri·ªÉn.",
    ],
    a: "L√† ‚ÄúƒÉn c·∫Øp c·ªßa c√¥ng l√†m c·ªßa t∆∞.‚Äù",
  },
  {
    q: "3. M·ªôt trong nh·ªØng ƒë·∫∑c ƒëi·ªÉm c·ªßa h√†nh vi tham nh≈©ng l√† g√¨?",
    choices: [
      "D·ªÖ ph√°t hi·ªán v√† x·ª≠ l√Ω.",
      "Tinh vi, ·∫©n gi·∫•u, th∆∞·ªùng c√≥ t√≠nh m√≥c n·ªëi.",
      "Ch·ªâ x·∫£y ra trong lƒ©nh v·ª±c t√†i ch√≠nh",
      "Kh√¥ng g√¢y h·∫≠u qu·∫£ nghi√™m tr·ªçng.",
    ],
    a: "Tinh vi, ·∫©n gi·∫•u, th∆∞·ªùng c√≥ t√≠nh m√≥c n·ªëi.",
  },
  {
    q: "4. Tham nh≈©ng c√≥ m·ªëi quan h·ªá nh∆∞ th·∫ø n√†o v·ªõi ti√™u c·ª±c?",
    choices: [
      "Kh√¥ng li√™n quan ƒë·∫øn nhau",
      "Tham nh≈©ng l√† nguy√™n nh√¢n c·ªßa ti√™u c·ª±c.",
      "Tham nh≈©ng l√† bi·ªÉu hi·ªán c·ª• th·ªÉ c·ªßa ti√™u c·ª±c.",
      "Ti√™u c·ª±c l√†m gi·∫£m nguy c∆° tham nh≈©ng.",
    ],
    a: "Tham nh≈©ng l√† bi·ªÉu hi·ªán c·ª• th·ªÉ c·ªßa ti√™u c·ª±c.",
  },
  {
    q: "5. M·ª•c ti√™u cu·ªëi c√πng c·ªßa c√¥ng t√°c ph√≤ng, ch·ªëng tham nh≈©ng l√† g√¨?",
    choices: [
      "B·∫Øt gi·ªØ to√†n b·ªô ƒë·ªëi t∆∞·ª£ng ph·∫°m t·ªôi.",
      "L√†m trong s·∫°ch ƒê·∫£ng v√† b·ªô m√°y Nh√† n∆∞·ªõc, ph√°t tri·ªÉn ƒë·∫•t n∆∞·ªõc.",
      "TƒÉng c∆∞·ªùng quy·ªÅn l·ª±c cho c√°c c∆° quan ƒëi·ªÅu tra.",
      "Lo·∫°i b·ªè to√†n b·ªô c√°n b·ªô l√£nh ƒë·∫°o.",
    ],
    a: "L√†m trong s·∫°ch ƒê·∫£ng v√† b·ªô m√°y Nh√† n∆∞·ªõc, ph√°t tri·ªÉn ƒë·∫•t n∆∞·ªõc.",
  },
  {
    q: "6. T√°c h·∫°i l·ªõn nh·∫•t c·ªßa tham nh≈©ng l√† g√¨?",
    choices: [
      "L√†m m·∫•t ti·ªÅn c·ªßa nh√† n∆∞·ªõc.",
      "L√†m suy tho√°i l√≤ng tin c·ªßa nh√¢n d√¢n ƒë·ªëi v·ªõi ƒê·∫£ng v√† ch·∫ø ƒë·ªô.",
      "l√†m gi·∫£m t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng kinh t·∫ø.",
      "TƒÉng chi ph√≠ h√†nh ch√≠nh.",
    ],
    a: "L√†m suy tho√°i l√≤ng tin c·ªßa nh√¢n d√¢n ƒë·ªëi v·ªõi ƒë·∫£ng v√† ch·∫ø ƒë·ªô.",
  },
  {
    q: "7. Bi·ªán ph√°p n√†o sau ƒë√¢y ƒë∆∞·ª£c xem l√† tr·ªçng t√¢m trong c√¥ng t√°c ph√≤ng, ch·ªëng tham nh≈©ng?",
    choices: [
      "x·ª≠ l√Ω h√¨nh s·ª±",
      "ƒëi·ªÅu tra, truy t·ªë",
      "ph√≤ng ng·ª´a t·ª´ s·ªõm, t·ª´ xa, t·ª´ g·ªëc",
      "Tuy√™n truy·ªÅn tr√™n ph∆∞∆°ng ti·ªán truy·ªÅn th√¥ng.",
    ],
    a: "ph√≤ng ng·ª´a t·ª´ s·ªõm, t·ª´ xa, t·ª´ g·ªëc",
  },
  {
    q: "8. Theo t∆∞ t∆∞·ªüng ch·ªâ ƒë·∫°o, c√¥ng t√°c ch·ªëng tham nh≈©ng c·∫ßn th·ª±c hi·ªán theo nguy√™n t·∫Øc n√†o?",
    choices: [
      "∆Øu ti√™n x·ª≠ l√Ω c√°n b·ªô c·∫•p th·∫•p.",
      "Kh√¥ng c√≥ v√πng c·∫•m, kh√¥ng c√≥ ngo·∫°i l·ªá.",
      "T·∫≠p trung v√†o c√°c ƒë·ªãa ph∆∞∆°ng l·ªõn.",
      "Ch·ªâ x·ª≠ l√Ω khi c√≥ b·∫±ng ch·ª©ng r√µ r√†ng.",
    ],
    a: "Kh√¥ng c√≥ v√πng c·∫•m, kh√¥ng c√≥ ngo·∫°i l·ªá.",
  },
  {
    q: "9. Th√†nh t·ª±u n√†o n·ªïi b·∫≠t trong 10 nƒÉm ch·ªëng tham nh≈©ng (2012‚Äì2022)?",
    choices: [
      "X·ª≠ l√Ω h√¨nh s·ª± h∆°n 10.000 v·ª• √°n.",
      "X·ª≠ l√Ω k·ª∑ lu·∫≠t h∆°n 190 c√°n b·ªô c·∫•p cao thu·ªôc di·ªán Trung ∆∞∆°ng qu·∫£n l√Ω.",
      "Truy thu h∆°n 200.000 TyÃâ ƒê√¥ÃÄng t∆∞ÃÄ nh∆∞ÃÉng t√¥Ã£i phaÃ£m tham nh≈©ng.",
      "Gi·∫£m ƒë∆∞·ª£c to√†n b·ªô n·∫°n tham nh≈©ng v·∫∑t.",
    ],
    a: "X·ª≠ l√Ω k·ª∑ lu·∫≠t h∆°n 190 c√°n b·ªô c·∫•p cao thu·ªôc di·ªán Trung ∆∞∆°ng qu·∫£n l√Ω.",
  },
  {
    q: "10. Bi·ªán ph√°p n√†o gi√∫p x√¢y d·ª±ng vƒÉn h√≥a ‚Äúkh√¥ng mu·ªën, kh√¥ng c·∫ßn‚Äù tham nh≈©ng?",
    choices: [
      "TƒÉng m·ª©c ph·∫°t h√†nh ch√≠nh.",
      "C·∫Øt gi·∫£m nh√¢n s·ª± c√¥ng v·ª•.",
      "X√¢y d·ª±ng vƒÉn h√≥a li√™m ch√≠nh, c·∫£i thi·ªán thu nh·∫≠p, n√¢ng cao ƒë·∫°o ƒë·ª©c c√¥ng v·ª•.",
      "Ban h√†nh th√™m nhi·ªÅu quy ƒë·ªãnh ki·ªÉm tra.",
    ],
    a: "X√¢y d·ª±ng vƒÉn h√≥a li√™m ch√≠nh, c·∫£i thi·ªán thu nh·∫≠p, n√¢ng cao ƒë·∫°o ƒë·ª©c c√¥ng v·ª•.",
  },
];


let scores = { black: 0, orange: 0 };
let askedQuestions = new Set();
let selectedAnswer = null;
let currentBgIndex = 0;
let positions = { black: 0, orange: 0 };
let turn = "black"; // 'black' ho·∫∑c 'orange'
let currentQuestion = null;

let timerInterval;
const timeLimit = 60; // 60 gi√¢y ƒë·∫øm ng∆∞·ª£c cho m·ªói c√¢u h·ªèi

// --- H√†m hi·ªÉn th·ªã popup chung ---
function showPopup(message, type = "info", callback) {
  Swal.fire({
    icon: type, // 'success', 'error', 'warning', 'info', 'question'
    title: message,
    confirmButtonText: "OK",
    allowOutsideClick: false,
  }).then(() => {
    if (callback) callback();
  });
}

// --- Hi·ªáu ·ª©ng thay ƒë·ªïi background ---
function changeBackground() {
  currentBgIndex = (currentBgIndex + 1) % backgrounds.length;
  raceTrack.style.backgroundImage = `url('${backgrounds[currentBgIndex]}')`;
}
setInterval(changeBackground, 10000);
raceTrack.style.backgroundImage = `url('${backgrounds[0]}')`;

// --- L·∫•y c√¢u h·ªèi ng·∫´u nhi√™n ch∆∞a h·ªèi ---
function getRandomQuestion() {
  if (askedQuestions.size === questions.length) {
    // H·∫øt c√¢u h·ªèi
    return null;
  }
  let index;
  do {
    index = Math.floor(Math.random() * questions.length);
  } while (askedQuestions.has(index));
  askedQuestions.add(index);
  return questions[index];
}

// --- C·∫≠p nh·∫≠t th√¥ng tin l∆∞·ª£t ---
function updateInfo() {
  infoTurn.textContent = `L∆∞·ª£t tr·∫£ l·ªùi: ƒê·ªôi ${
    turn === "black" ? "M√®o ƒêen ƒêen ƒêuÃâi" : "M√®o Cam Tai Ti√™ÃÅng"
  }`;
}

// --- C·∫≠p nh·∫≠t b·∫£ng ƒëi·ªÉm ---
function updateScoreboard() {
  scoreBlackEl.textContent = scores.black;
  scoreOrangeEl.textContent = scores.orange;
}

// --- D·ª´ng ƒë·∫øm ng∆∞·ª£c ---
function stopTimer() {
  clearInterval(timerInterval);
  if (timerElem) timerElem.textContent = "";
}

// --- B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c ---
function startTimer(onTimeout) {
  let timeLeft = timeLimit;
  if (timerElem) timerElem.textContent = `Th·ªùi gian c√≤n l·∫°i: ${timeLeft}s`;

  clearInterval(timerInterval);
  timerInterval = setInterval(() => {
    timeLeft--;
    if (timerElem) timerElem.textContent = `Th·ªùi gian c√≤n l·∫°i: ${timeLeft}s`;
    if (timeLeft <= 0) {
      clearInterval(timerInterval);
      onTimeout();
    }
  }, 1000);
}

// --- Hi·ªÉn th·ªã c√¢u h·ªèi ---
function showQuestion() {
  currentQuestion = getRandomQuestion();

  if (!currentQuestion) {
    // H·∫øt c√¢u h·ªèi, hi·ªán k·∫øt qu·∫£ chung
    showResult();
    return;
  }

  questionText.textContent = currentQuestion.q;

  // X√≥a ƒë√°p √°n c≈©
  answersContainer.innerHTML = "";
  selectedAnswer = null;
  submitAnswer.disabled = true;

  currentQuestion.choices.forEach((choice) => {
    const div = document.createElement("div");
    div.classList.add("answer-option");
    div.textContent = choice;

    div.onclick = () => {
      const prev = answersContainer.querySelector(".selected");
      if (prev) prev.classList.remove("selected");

      div.classList.add("selected");
      selectedAnswer = choice;
      submitAnswer.disabled = false;
    };

    answersContainer.appendChild(div);
  });

  questionContainer.style.display = "block";
  resultContainer.style.display = "none"; // ·∫®n b·∫£ng k·∫øt qu·∫£ n·∫øu c√≥

  startTimer(onTimeOut); // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c khi c√¢u h·ªèi hi·ªÉn th·ªã
}

// --- X·ª≠ l√Ω khi h·∫øt th·ªùi gian ---
function onTimeOut() {
  stopTimer();
  if (selectedAnswer === null) {
    // Ng∆∞·ªùi ch∆°i kh√¥ng ch·ªçn, coi nh∆∞ sai
    showAnswerResult(false, currentQuestion.a);
  }
}

// --- Hi·ªÉn th·ªã popup k·∫øt qu·∫£ c√¢u h·ªèi ƒë√∫ng/sai ---
function showAnswerResult(isCorrect, correctAnswer) {
  stopTimer();

  let title = isCorrect ? "Ch√≠nh x√°c! üéâ" : "Sai r·ªìi!";
  let htmlContent = isCorrect
    ? `<p>Chu√¢Ãân kh√¥ng c√¢ÃÄn chiÃânh lu√¥n.</p>`
    : `<p>ƒê√°p √°n ƒë√∫ng l√†: <strong>${correctAnswer}</strong></p>`;

  Swal.fire({
    title: title,
    html: htmlContent,
    icon: isCorrect ? "success" : "error",
    confirmButtonText: "Ti·∫øp t·ª•c",
    width: "400px",
  }).then(() => {
    // Load c√¢u h·ªèi ti·∫øp theo v√† reset timer
    loadNextQuestion();
  });
}

// --- Load c√¢u h·ªèi ti·∫øp theo ---
function loadNextQuestion() {
  selectedAnswer = null;
  showQuestion();
}

// --- Di chuy·ªÉn m√®o v√† c·∫≠p nh·∫≠t ƒëi·ªÉm ---
function moveCat(cat) {
  positions[cat] += moveStep;
  scores[cat] += 1; // c·ªông ƒëi·ªÉm
  updateScoreboard();

  if (positions[cat] > finishLine) positions[cat] = finishLine;

  if (cat === "black") {
    catBlack.style.left = positions[cat] + "px";
  } else {
    catOrange.style.left = positions[cat] + "px";
  }
}

// --- Ki·ªÉm tra ng∆∞·ªùi th·∫Øng cu·ªôc ---
function checkWinner() {
  if (positions.black >= finishLine) {
    showPopup("M√®o ƒêen tiÃÄnh,.... NH∆ØNG ƒêOÃâ BAÃ£C!", "success");
    confetti({
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 },
    });
    showResult();
    return true;
  }
  if (positions.orange >= finishLine) {
    showPopup("M√®o Cam kh√¥ng tai ti√™ÃÅng,... MEÃÄO DANH TI√äÃÅNG!", "success");
    confetti({
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 },
    });
    showResult();
    return true;
  }
  return false;
}

// --- Hi·ªÉn th·ªã k·∫øt qu·∫£ chung ---
function showResult() {
  questionContainer.style.display = "none";
  resultContainer.style.display = "block";

  let winner = "";
  if (positions.black > positions.orange) winner = "ƒê·ªôi M√®o ƒêen th·∫Øng!";
  else if (positions.orange > positions.black) winner = "ƒê·ªôi M√®o Cam th·∫Øng!";
  else winner = "Hai ƒë·ªôi h√≤a nhau!";

  resultText.textContent = `${winner}`;

  Swal.fire({
    title:
      "CaÃÅm ∆°n Th√¢ÃÄy Duy vaÃÄ caÃÅc baÃ£n ƒëaÃÉ lƒÉÃÅng nghe baÃÄi thuy√™ÃÅt triÃÄnh cuÃâa nhoÃÅm em",
    html: `
      <p>M√¥Ã£t meÃÄo laÃÄm chƒÉÃâng l√™n non, hai meÃÄo chuÃ£m laÃ£i n√™n hoÃÄn nuÃÅi cao</p>   
    `,
    icon: "info",
    showConfirmButton: true,
    confirmButtonText: "ƒê√≥ng",
    width: "400px",
    didOpen: () => {
      // B·∫Øn ph√°o hoa 2.5 gi√¢y
      const duration = 8500;
      const animationEnd = Date.now() + duration;
      const defaults = {
        startVelocity: 30,
        spread: 360,
        ticks: 60,
        zIndex: 1000,
      };

      const interval = setInterval(function () {
        const timeLeft = animationEnd - Date.now();

        if (timeLeft <= 0) {
          return clearInterval(interval);
        }

        const particleCount = 50 * (timeLeft / duration);
        confetti(
          Object.assign({}, defaults, {
            particleCount,
            origin: { x: 0.1, y: 0.5 },
          })
        );
        confetti(
          Object.assign({}, defaults, {
            particleCount,
            origin: { x: 0.9, y: 0.5 },
          })
        );
      }, 250);
    },
    willClose: () => {
      resetGame();
    },
  });
}

// --- Reset game ---
function resetGame() {
  positions.black = 0;
  positions.orange = 0;
  scores.black = 0;
  scores.orange = 0;
  updateScoreboard();

  catBlack.style.left = "0px";
  catOrange.style.left = "0px";

  questionContainer.style.display = "none";
  startBtn.style.display = "inline-block";
  infoTurn.textContent = "";
  turn = "black";
  if (timerElem) timerElem.textContent = "";
}

// --- S·ª± ki·ªán khi b·∫•m n√∫t Tr·∫£ l·ªùi ---
submitAnswer.onclick = () => {
  if (!selectedAnswer) return showPopup("Vui l√≤ng ch·ªçn ƒë√°p √°n!", "warning");

  stopTimer();

  const isCorrect =
    selectedAnswer.toLowerCase() === currentQuestion.a.toLowerCase();

  if (isCorrect) {
    showPopup("ƒê√∫ng r·ªìi!, Anh em ta c∆∞ÃÅ th√™ÃÅ th√¥i heÃ£ heÃ£ heÃ£ heÃ£.", "success");
    moveCat(turn);
    if (checkWinner()) {
      return; // k·∫øt th√∫c game n·∫øu c√≥ th·∫Øng
    }
  } else {
    showPopup("Kh√¥ng sao! Thua keo n√†y ta x√†i keo d√°n s·∫Øt.", "error");
  }

  // ƒê·ªïi l∆∞·ª£t tr·∫£ l·ªùi sau khi ƒë√∫ng ho·∫∑c sai
  turn = turn === "black" ? "orange" : "black";
  updateInfo();
  showQuestion();
};

// --- S·ª± ki·ªán khi b·∫•m n√∫t B·∫Øt ƒë·∫ßu ---
startBtn.onclick = () => {
  startBtn.style.display = "none";
  positions.black = 0;
  positions.orange = 0;
  catBlack.style.left = "0px";
  catOrange.style.left = "0px";
  askedQuestions.clear();
  updateInfo();
  showQuestion();
};

// --- S·ª± ki·ªán khi b·∫•m n√∫t Ch∆°i l·∫°i (n·∫øu d√πng) ---
restartBtn.onclick = () => {
  resetGame();
};
